import math

class Vector:
    def __init__(self, *components):
        self.components = components

    def __repr__(self):
        return f"Vector{self.components}"

    def __add__(self, other):
        if len(self.components) != len(other.components):
            raise ValueError("Vektorlar o‘lchamlari mos bo‘lishi kerak!")
        return Vector(*[a + b for a, b in zip(self.components, other.components)])

    def __sub__(self, other):
        if len(self.components) != len(other.components):
            raise ValueError("Vektorlar o‘lchamlari mos bo‘lishi kerak!")
        return Vector(*[a - b for a, b in zip(self.components, other.components)])

    def __mul__(self, other):
        if isinstance(other, (int, float)):  # Skaler ko‘paytirish
            return Vector(*[a * other for a in self.components])
        elif isinstance(other, Vector):  # Nuqta mahsuloti
            if len(self.components) != len(other.components):
                raise ValueError("Vektorlar o‘lchamlari mos bo‘lishi kerak!")
            return sum(a * b for a, b in zip(self.components, other.components))

    def magnitude(self):
        return math.sqrt(sum(a**2 for a in self.components))

    def normalize(self):
        mag = self.magnitude()
        if mag == 0:
            raise ValueError("Nol vektorni normallashtirib bo‘lmaydi!")
        return Vector(*[a / mag for a in self.components])

# Misollar
v1 = Vector(1, 2, 3)
v2 = Vector(4, 5, 6)
print(v1 + v2)  # Vector(5, 7, 9)
print(v1 - v2)  # Vector(-3, -3, -3)
print(v1 * v2)  # 32 (Nuqta mahsuloti)
print(3 * v1)   # Vector(3, 6, 9)
print(v1.magnitude())  # 3.74...
print(v1.normalize())  # Vector(0.26, 0.53, 0.80)
